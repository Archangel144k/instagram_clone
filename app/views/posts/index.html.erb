<div class="container mx-auto py-10 px-4">
  <!-- Feed Header -->
  <div class="flex flex-col md:flex-row items-center justify-between mb-10">
    <h1 class="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-blue-400 mb-4 md:mb-0 tracking-tight">Your Feed</h1>
    <div class="flex items-center space-x-2 bg-gray-800/60 backdrop-blur-md p-1 rounded-xl shadow">
      <%= link_to posts_path(filter: "latest"),
        class: "px-5 py-2.5 rounded-lg #{params[:filter] != 'following' ? 'bg-gradient-to-r from-teal-500 to-blue-500 text-white shadow-md' : 'bg-transparent text-gray-300 hover:bg-gray-700/50'} transition-all duration-300 font-semibold" do %>
        <i class="fas fa-clock mr-2"></i> Latest
      <% end %>
      <%= link_to posts_path(filter: "following"),
        class: "px-5 py-2.5 rounded-lg #{params[:filter] == 'following' ? 'bg-gradient-to-r from-teal-500 to-blue-500 text-white shadow-md' : 'bg-transparent text-gray-300 hover:bg-gray-700/50'} transition-all duration-300 font-semibold" do %>
        <i class="fas fa-user-friends mr-2"></i> Following
      <% end %>
    </div>
  </div>

  <!-- Stories -->
  <div class="mb-8 overflow-x-auto py-4">
    <div class="flex space-x-6 px-4">
      <!-- Create Story -->
      <div class="flex flex-col items-center">
        <%= link_to new_story_path, class: "w-16 h-16 rounded-full flex items-center justify-center bg-gray-800 border-2 border-dashed border-teal-400 hover:bg-gray-700 transition-colors shadow" do %>
          <i class="fas fa-plus text-teal-400"></i>
        <% end %>
        <span class="text-xs text-gray-400 mt-2 font-medium">Create</span>
      </div>
      <!-- User Stories -->
      <% Story.for_feed(current_user).group_by(&:user).each do |user, stories| %>
        <div class="flex flex-col items-center">
          <%= link_to stories_path(start_user: user.id), class: "w-16 h-16" do %>
            <div class="w-full h-full rounded-full bg-gradient-to-br from-teal-500 to-blue-500 p-[2px] <%= current_user.story_views.where(story: stories).count == stories.count ? 'opacity-50' : '' %>">
              <div class="rounded-full w-full h-full border-2 border-gray-900 overflow-hidden">
                <%= image_tag user.avatar_variant(:thumb), class: "w-full h-full object-cover" %>
              </div>
            </div>
          <% end %>
          <span class="text-xs text-gray-400 mt-2 truncate w-16 text-center font-medium"><%= user.username %></span>
        </div>
      <% end %>
    </div>
  </div>

  <% if @posts.present? %>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
      <% @posts.each do |post| %>
        <div class="flip-card group relative w-full h-[450px] perspective" data-post-id="<%= post.id %>">
          <div class="flip-card-inner w-full h-full" data-flip="false">
            <!-- Front -->
            <div class="flip-card-front bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl shadow-xl overflow-hidden border border-gray-700/30">
              <!-- Post Image (NOT a link) -->
              <div class="relative w-full h-56">
                <% if post.image_variant(:medium).present? %>
                  <%= image_tag post.image_variant(:medium), class: "w-full h-full object-cover" %>
                <% end %>
                <!-- View Details button (explicit navigation) -->
                <%= link_to post_path(post), class: "absolute top-3 right-3 bg-black/50 hover:bg-black/70 backdrop-blur-sm text-white text-xs py-1 px-3 rounded-full transition-all" do %>
                  <i class="fas fa-expand-alt mr-1"></i> View
                <% end %>
              </div>
              
              <div class="p-4 flex-1 flex flex-col">
                <%= link_to user_path(post.user), class: "flex items-center space-x-3 mb-2" do %>
                  <%= image_tag post.user.avatar_variant(:thumb), class: "h-8 w-8 rounded-full object-cover ring-2 ring-gray-700" %>
                  <span class="text-sm font-semibold text-gray-200"><%= post.user.username %></span>
                <% end %>
                <p class="text-gray-200 text-base mb-2"><%= truncate(post.caption, length: 80) %></p>
                <div class="flex items-center justify-between mt-auto">
                  <!-- Front side comment button -->
                  <button type="button" class="flip-btn text-teal-400 hover:text-teal-300 transition-colors py-1 px-3 rounded-full bg-black/30 hover:bg-black/50" title="Show comments">
                    <i class="fas fa-comment-dots"></i> 
                    <span class="ml-1"><%= post.comments.count %></span>
                  </button>
                  <span class="text-xs text-gray-500"><%= time_ago_in_words(post.created_at) %> ago</span>
                </div>
              </div>
            </div>
            
            <!-- Back -->
            <div class="flip-card-back rounded-2xl shadow-xl border border-gray-700/30 p-4">
              <!-- Comment Header -->
              <div class="flex items-center justify-between mb-3">
                <h3 class="text-teal-400 font-bold">Comments</h3>
                <span class="text-xs text-gray-400">(<%= post.comments.count %>)</span>
              </div>
              
              <!-- Comments List -->
              <div class="flex-1 overflow-y-auto space-y-3 mb-4 max-h-36 pr-2 custom-scrollbar">
                <% if post.comments.any? %>
                  <% post.comments.order(created_at: :desc).limit(5).each do |comment| %>
                    <div class="flex items-start space-x-2 bg-gray-800/40 rounded-lg p-2">
                      <%= image_tag comment.user.avatar_url(size: 24), class: "h-6 w-6 rounded-full object-cover border border-gray-700 mt-1" %>
                      <div class="flex-1">
                        <span class="font-semibold text-teal-300 text-sm"><%= comment.user.username %></span>
                        <p class="text-gray-200 text-sm break-words"><%= truncate(comment.body, length: 60) %></p>
                        <span class="block text-xs text-gray-500"><%= time_ago_in_words(comment.created_at) %> ago</span>
                      </div>
                    </div>
                  <% end %>
                  <% if post.comments.count > 5 %>
                    <div class="text-xs text-center text-teal-400 mt-2 py-1 border-t border-gray-700/30">
                      <%= link_to post_path(post, anchor: "comments"), class: "hover:underline" do %>
                        View all <%= post.comments.count %> comments
                      <% end %>
                    </div>
                  <% end %>
                <% else %>
                  <div class="text-gray-400 text-sm text-center py-3">
                    No comments yet. Be the first to comment!
                  </div>
                <% end %>
              </div>
              
              <!-- Comment Form -->
              <% if user_signed_in? %>
                <div class="border-t border-gray-700/30 pt-3 mb-3">
                  <%= form_with(model: [post, Comment.new], remote: true, html: { class: "flex items-center gap-2" }) do |f| %>
                    <%= f.text_field :body, placeholder: "Add a comment...", class: "flex-1 min-w-0 bg-gray-800 text-gray-100 rounded-full px-3 py-2 border border-gray-700 focus:outline-none focus:border-teal-400 text-sm" %>
                    <%= f.submit "Post", class: "flex-shrink-0 bg-gradient-to-r from-teal-500 to-blue-500 hover:from-teal-600 hover:to-blue-600 text-white px-4 py-2 rounded-full text-sm transition-colors" %>
                  <% end %>
                </div>
              <% end %>
              
              <!-- Back side actions -->
              <div class="flex justify-between items-center mt-auto pt-2 border-t border-gray-700/30">
                <!-- Like button -->
                <div>
                  <%= button_to like_post_path(post), method: current_user.likes?(post) ? :delete : :post, 
                      remote: true, form: { data: { turbo: false }, class: "inline-block" },
                      class: "bg-black/40 hover:bg-black/60 p-2 rounded-full border border-gray-700/50 transition-all" do %>
                    <i class="<%= current_user.likes?(post) ? 'fas' : 'far' %> fa-heart <%= current_user.likes?(post) ? 'text-red-500' : 'text-gray-300' %>"></i>
                    <span class="text-xs ml-1"><%= post.likes.count %></span>
                  <% end %>
                </div>

                <!-- Save button -->
                <div>
                  <%= button_to save_post_path(post), method: current_user.saved?(post) ? :delete : :post, 
                      remote: true, form: { data: { turbo: false }, class: "inline-block" },
                      class: "bg-black/40 hover:bg-black/60 p-2 rounded-full border border-gray-700/50 transition-all" do %>
                    <i class="<%= current_user.saved?(post) ? 'fas' : 'far' %> fa-bookmark <%= current_user.saved?(post) ? 'text-teal-400' : 'text-gray-300' %>"></i>
                  <% end %>
                </div>

                <!-- Back side flip button -->
                <button type="button" class="flip-btn bg-black/40 hover:bg-black/60 p-2 rounded-full border border-gray-700/50 text-gray-300 hover:text-teal-400 transition-all" title="Back to post">
                  <i class="fas fa-reply"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <!-- Pagination -->
    <div class="flex justify-center mt-10">
      <% if defined?(@posts.next_page) && @posts.next_page %>
        <%= link_to_next_page @posts, 'Load More', class: 'pagination bg-gradient-to-r from-teal-500 to-blue-500 hover:from-teal-600 hover:to-blue-600 text-white font-semibold py-2 px-8 rounded-lg flex items-center shadow-lg hover:shadow-xl transition-all duration-300' %>
      <% else %>
        <p class="text-gray-500 text-center">You've reached the end!</p>
      <% end %>
    </div>
  <% else %>
    <!-- Empty State -->
    <div class="bg-gradient-to-br from-gray-800 to-gray-900 rounded-2xl shadow-xl p-12 text-center max-w-xl mx-auto border border-gray-700/30 backdrop-blur-sm">
      <div class="text-gray-400 mb-8">
        <div class="mx-auto h-32 w-32 mb-6 rounded-full bg-gray-700/30 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </div>
        <h3 class="text-2xl font-semibold mb-3 text-white">No posts in your feed yet</h3>
        <p class="mb-8 text-gray-400 max-w-sm mx-auto">Start by following users or create your own post to share with the world!</p>
        <div class="flex flex-col sm:flex-row justify-center gap-4">
          <%= link_to new_post_path, class: "bg-gradient-to-r from-teal-500 to-blue-500 hover:from-teal-600 hover:to-blue-600 text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-0.5" do %>
            <i class="fas fa-plus mr-2"></i> Create Post
          <% end %>
          <%= link_to explore_posts_path, class: "bg-gradient-to-r from-gray-700 to-gray-600 hover:from-gray-600 hover:to-gray-500 text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-0.5" do %>
            <i class="fas fa-compass mr-2"></i> Explore
          <% end %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<style>
.perspective {
  perspective: 1200px;
}
.flip-card {
  min-height: 450px;
  height: 450px;
  position: relative;
}
.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transition: all 0.5s ease;
}
.flip-card-inner[data-flip="true"] .flip-card-front {
  opacity: 0;
  z-index: 1;
}
.flip-card-inner[data-flip="true"] .flip-card-back {
  opacity: 1;
  z-index: 2;
}
.flip-card-front, .flip-card-back {
  backface-visibility: hidden;
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0; left: 0;
  display: flex;
  flex-direction: column;
  border-radius: 1rem;
  transition: opacity 0.5s ease;
}
.flip-card-front {
  opacity: 1;
  z-index: 2;
}
.flip-card-back {
  opacity: 0;
  background: #18181b;
  overflow-y: auto;
  z-index: 1;
}
.flip-btn {
  position: relative;
  z-index: 10;
}
.custom-scrollbar::-webkit-scrollbar {
  width: 4px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: rgba(0,0,0,0.1);
  border-radius: 10px;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: rgba(79, 209, 197, 0.3);
  border-radius: 10px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: rgba(79, 209, 197, 0.5);
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // Flip card functionality (keep this part)
  const flipButtons = document.querySelectorAll('.flip-btn');
  
  flipButtons.forEach(function(button) {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const card = button.closest('.flip-card');
      if (!card) return;
      
      const inner = card.querySelector('.flip-card-inner');
      if (inner) {
        const currentState = inner.getAttribute('data-flip') === 'true';
        inner.setAttribute('data-flip', !currentState);
      }
    });
  });
  
  // Handle comment forms with AJAX
  document.querySelectorAll('form[data-remote="true"]').forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const url = form.action;
      const postId = form.closest('.flip-card').dataset.postId;
      
      fetch(url, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        credentials: 'same-origin'
      })
      .then(response => response.json())
      .then(data => {
        // Clear the form
        form.reset();
        
        // Add the new comment to the list if successful
        if (data.success) {
          const commentsList = form.closest('.flip-card-back').querySelector('.custom-scrollbar');
          
          // If empty state message exists, remove it
          const emptyState = commentsList.querySelector('.text-gray-400.text-center');
          if (emptyState) emptyState.remove();
          
          // Create and add the new comment
          const newComment = document.createElement('div');
          newComment.className = 'flex items-start space-x-2 bg-gray-800/40 rounded-lg p-2';
          newComment.innerHTML = `
            <img src="${data.avatar_url}" class="h-6 w-6 rounded-full object-cover border border-gray-700 mt-1">
            <div class="flex-1">
              <span class="font-semibold text-teal-300 text-sm">${data.username}</span>
              <p class="text-gray-200 text-sm break-words">${data.body}</p>
              <span class="block text-xs text-gray-500">just now</span>
            </div>
          `;
          
          // Add to top of list
          commentsList.prepend(newComment);
          
          // Update comment count
          const countEl = form.closest('.flip-card-back').querySelector('span.text-xs.text-gray-400');
          const frontCountEl = form.closest('.flip-card').querySelector('.flip-btn span');
          const count = parseInt(countEl.textContent.match(/\d+/)[0]) + 1;
          countEl.textContent = `(${count})`;
          frontCountEl.textContent = count;
        }
      })
      .catch(error => console.error('Error:', error));
    });
  });
  
  // Handle like/save buttons with AJAX
  document.querySelectorAll('form[data-turbo="false"]').forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const url = form.action;
      const method = form.querySelector('input[name="_method"]') ? 
                    form.querySelector('input[name="_method"]').value : 'post';
      
      fetch(url, {
        method: method === 'delete' ? 'DELETE' : 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        credentials: 'same-origin'
      })
      .then(response => response.json())
      .then(data => {
        // Update the button based on response
        if (data.success) {
          // Check if this is a like or save button
          if (url.includes('like')) {
            const icon = form.querySelector('i');
            const countSpan = form.querySelector('span');
            
            if (method === 'delete') {
              icon.className = 'far fa-heart text-gray-300';
              form.querySelector('input[name="_method"]').value = 'post';
              countSpan.textContent = parseInt(countSpan.textContent) - 1;
            } else {
              icon.className = 'fas fa-heart text-red-500';
              const methodInput = document.createElement('input');
              methodInput.type = 'hidden';
              methodInput.name = '_method';
              methodInput.value = 'delete';
              form.appendChild(methodInput);
              countSpan.textContent = parseInt(countSpan.textContent) + 1;
            }
          } else if (url.includes('save')) {
            const icon = form.querySelector('i');
            
            if (method === 'delete') {
              icon.className = 'far fa-bookmark text-gray-300';
              form.querySelector('input[name="_method"]').value = 'post';
            } else {
              icon.className = 'fas fa-bookmark text-teal-400';
              const methodInput = document.createElement('input');
              methodInput.type = 'hidden';
              methodInput.name = '_method';
              methodInput.value = 'delete';
              form.appendChild(methodInput);
            }
          }
        }
      })
      .catch(error => console.error('Error:', error));
    });
  });
});
</script>